from __future__ import annotations
from datetime import date, timedelta
import unittest

from src.data_structures import LinkedList
from src.core_type import AdvancedTransaction
from src.algorithms.advanced_transactions.greedy import AdvancedGreedySimplifier
from src.utils.financial_calculator import InterestType, PenaltyType, FinancialCalculator
from src.utils.constants import EPSILON
from src.utils.money_utils import round_money

class TestAdvancedGreedySimplifier(unittest.TestCase):
    """B·ªô ki·ªÉm th·ª≠ cho AdvancedGreedySimplifier"""
    def setUp(self):
        """Thi·∫øt l·∫≠p d·ªØ li·ªáu test c∆° b·∫£n"""
        self.base_date = date(2024, 1, 1)
        self.current_date = date(2024, 6, 1)  # 5 th√°ng sau

    def test_initialization(self):
        """Test kh·ªüi t·∫°o AdvancedGreedySimplifier"""
        print("\n" + "="*60)
        print("TEST: Kh·ªüi t·∫°o")
        print("="*60)

        transactions = LinkedList[AdvancedTransaction]()
        tx = AdvancedTransaction(
            debtor="Alice", creditor="Bob", amount=100.0,
            borrow_date=self.base_date, due_date=self.current_date,
            interest_rate=0.05, penalty_rate=10.0,
            interest_type=InterestType.SIMPLE,
            penalty_type=PenaltyType.FIXED
        )
        transactions.append(tx)

        simplifier = AdvancedGreedySimplifier(
            transactions=transactions,
            current_date=self.current_date
        )

        self.assertIsNotNone(simplifier)
        self.assertEqual(simplifier.current_date, self.current_date)
        print("‚úÖ Test kh·ªüi t·∫°o th√†nh c√¥ng")

    def test_empty_transactions(self):
        """Test v·ªõi danh s√°ch giao d·ªãch r·ªóng"""
        print("\n" + "="*60)
        print("TEST: Danh s√°ch giao d·ªãch r·ªóng")
        print("="*60)

        transactions = LinkedList[AdvancedTransaction]()
        simplifier = AdvancedGreedySimplifier(
            transactions=transactions,
            current_date=self.current_date
        )

        simplified = simplifier.simplify()
        self.assertTrue(simplified.is_empty())

        print("üìä X·ª≠ l√Ω giao d·ªãch r·ªóng ƒë√∫ng")
        print("‚úÖ Test danh s√°ch giao d·ªãch r·ªóng th√†nh c√¥ng")

    def test_single_transaction(self):
        """Test v·ªõi m·ªôt giao d·ªãch duy nh·∫•t"""
        print("\n" + "="*60)
        print("TEST: Giao d·ªãch ƒë∆°n l·∫ª")
        print("="*60)

        transactions = LinkedList[AdvancedTransaction]()
        tx = AdvancedTransaction(
            debtor="Alice", creditor="Bob", amount=100.0,
            borrow_date=self.base_date, due_date=self.current_date,
            interest_rate=0.05, penalty_rate=0.0,
            interest_type=InterestType.SIMPLE,
            penalty_type=PenaltyType.FIXED
        )
        transactions.append(tx)

        simplifier = AdvancedGreedySimplifier(
            transactions=transactions,
            current_date=self.current_date
        )

        simplified = simplifier.simplify()
        self.assertFalse(simplified.is_empty())

        result_tx = simplified.head.data
        print(f"üí∏ K·∫øt qu·∫£: {result_tx.debtor} ‚Üí {result_tx.creditor} = ${result_tx.amount:.2f}")
        print("‚úÖ Test giao d·ªãch ƒë∆°n l·∫ª th√†nh c√¥ng")

    def test_simple_debt_simplification(self):
        """Test ƒë∆°n gi·∫£n h√≥a n·ª£ ƒë∆°n gi·∫£n"""
        print("\n" + "="*60)
        print("TEST: ƒê∆°n gi·∫£n h√≥a n·ª£ ƒë∆°n gi·∫£n")
        print("="*60)

        transactions = LinkedList[AdvancedTransaction]()

        # Alice n·ª£ Bob 20
        tx1 = AdvancedTransaction(
            debtor="Alice", creditor="Bob", amount=20.0,
            borrow_date=self.base_date, due_date=self.current_date,
            interest_rate=0.0, penalty_rate=0.0,
            interest_type=InterestType.SIMPLE,
            penalty_type=PenaltyType.FIXED
        )
        transactions.append(tx1)

        # Alice n·ª£ Charlie 80
        tx2 = AdvancedTransaction(
            debtor="Alice", creditor="Charlie", amount=80.0,
            borrow_date=self.base_date, due_date=self.current_date,
            interest_rate=0.0, penalty_rate=0.0,
            interest_type=InterestType.SIMPLE,
            penalty_type=PenaltyType.FIXED
        )
        transactions.append(tx2)

        simplifier = AdvancedGreedySimplifier(
            transactions=transactions,
            current_date=self.current_date
        )

        original_count = 2
        simplified = simplifier.simplify()

        # ƒê·∫øm s·ªë giao d·ªãch k·∫øt qu·∫£
        simplified_count = 0
        current = simplified.head
        transaction_num = 1

        while current:
            tx = current.data
            print(f"üí∏ Giao d·ªãch {transaction_num}: {tx.debtor} ‚Üí {tx.creditor} = ${tx.amount:.2f}")
            simplified_count += 1
            transaction_num += 1
            current = current.next

        print(f"üìä Giao d·ªãch ban ƒë·∫ßu: {original_count}")
        print(f"üìä Giao d·ªãch sau ƒë∆°n gi·∫£n h√≥a: {simplified_count}")
        print("‚úÖ Test ƒë∆°n gi·∫£n h√≥a n·ª£ ƒë∆°n gi·∫£n th√†nh c√¥ng")

    def test_financial_calculations(self):
        """Test t√≠nh to√°n t√†i ch√≠nh n√¢ng cao"""
        print("\n" + "="*60)
        print("TEST: T√≠nh to√°n t√†i ch√≠nh")
        print("="*60)

        transactions = LinkedList[AdvancedTransaction]()

        # Giao d·ªãch v·ªõi l√£i su·∫•t k√©p theo ng√†y
        tx1 = AdvancedTransaction(
            debtor="Alice", creditor="Bob", amount=50.0,
            borrow_date=self.base_date, due_date=date(2024, 3, 1),
            interest_rate=0.10, penalty_rate=20.0,
            interest_type=InterestType.COMPOUND_DAILY,
            penalty_type=PenaltyType.FIXED
        )
        transactions.append(tx1)

        simplifier = AdvancedGreedySimplifier(
            transactions=transactions,
            current_date=self.current_date
        )

        # T√≠nh s·ªë d∆∞ d·ª± ki·∫øn v√† ƒëi·ªÉm ∆∞u ti√™n b·∫±ng FinancialCalculator
        breakdown = FinancialCalculator.calculate_total_debt(
            50.0, 0.10, 20.0,
            self.base_date, date(2024, 3, 1), self.current_date,
            InterestType.COMPOUND_DAILY, PenaltyType.FIXED
        )
        expected_debt = breakdown['total']
        expected_priority = FinancialCalculator.calculate_priority_score(
            50.0, 0.10, 20.0,
            self.base_date, date(2024, 3, 1), self.current_date,
            InterestType.COMPOUND_DAILY, PenaltyType.FIXED
        )

        # Ki·ªÉm tra s·ªë d∆∞
        alice_balance = simplifier.people_balances.get("Alice", 0.0)
        bob_balance = simplifier.people_balances.get("Bob", 0.0)
        self.assertAlmostEqual(alice_balance, -round_money(expected_debt), delta=EPSILON)
        self.assertAlmostEqual(bob_balance, round_money(expected_debt), delta=EPSILON)
        print(f"üí∞ S·ªë d∆∞ Alice: ${alice_balance:.2f}, D·ª± ki·∫øn: ${-expected_debt:.2f}")
        print(f"üí∞ S·ªë d∆∞ Bob: ${bob_balance:.2f}, D·ª± ki·∫øn: ${expected_debt:.2f}")

        # Ki·ªÉm tra ƒëi·ªÉm ∆∞u ti√™n
        current = simplifier.transaction_details.head
        while current:
            detail = current.data
            if detail[0] == "Alice" and detail[1] == "Bob":
                actual_priority = detail[6]
                break
            current = current.next
        else:
            self.fail("Kh√¥ng t√¨m th·∫•y ƒëi·ªÉm ∆∞u ti√™n cho Alice->Bob")

        self.assertAlmostEqual(actual_priority, expected_priority, delta=EPSILON)
        print(f"‚≠ê ƒêi·ªÉm ∆∞u ti√™n: {actual_priority:.2f}, D·ª± ki·∫øn: {expected_priority:.2f}")
        print("‚úÖ Test t√≠nh to√°n t√†i ch√≠nh th√†nh c√¥ng")

    def test_debt_summary(self):
        """Test t√≥m t·∫Øt n·ª£"""
        print("\n" + "="*60)
        print("TEST: T√≥m t·∫Øt n·ª£")
        print("="*60)

        transactions = LinkedList[AdvancedTransaction]()

        # T·∫°o m·ªôt s·ªë giao d·ªãch ph·ª©c t·∫°p
        tx1 = AdvancedTransaction(
            debtor="Alice", creditor="Bob", amount=50.0,
            borrow_date=self.base_date, due_date=date(2024, 3, 1),
            interest_rate=0.10, penalty_rate=20.0,
            interest_type=InterestType.COMPOUND_DAILY,
            penalty_type=PenaltyType.FIXED
        )
        transactions.append(tx1)

        tx2 = AdvancedTransaction(
            debtor="David", creditor="Alice", amount=300.0,
            borrow_date=self.base_date, due_date=date(2024, 8, 1),
            interest_rate=0.08, penalty_rate=0.0,
            interest_type=InterestType.COMPOUND_MONTHLY,
            penalty_type=PenaltyType.FIXED
        )
        transactions.append(tx2)

        simplifier = AdvancedGreedySimplifier(
            transactions=transactions,
            current_date=self.current_date
        )

        print("üìä T√≥m t·∫Øt chi ti·∫øt n·ª£:")

        total_debt = 0.0
        total_credit = 0.0

        # Thu th·∫≠p th√¥ng tin t·ª´ng ng∆∞·ªùi
        people_info = {}
        for person in simplifier.people_balances.keys():
            balance = simplifier.people_balances.get(person, 0.0)

            debt_count = 0
            credit_count = 0
            max_priority = 0.0

            current = simplifier.transaction_details.head
            while current:
                detail = current.data
                debtor, creditor = detail[0], detail[1]
                priority = detail[6]

                if debtor == person:
                    debt_count += 1
                if creditor == person:
                    credit_count += 1
                if debtor == person or creditor == person:
                    max_priority = max(max_priority, priority)

                current = current.next

            people_info[person] = {
                'balance': balance,
                'priority': max_priority,
                'debt_count': debt_count,
                'credit_count': credit_count
            }

            if balance < 0:
                total_debt += abs(balance)
            else:
                total_credit += balance

        # S·∫Øp x·∫øp theo balance
        sorted_people = sorted(people_info.items(), key=lambda x: x[1]['balance'])

        for person, info in sorted_people:
            balance = info['balance']
            priority = info['priority']
            debt_count = info['debt_count']
            credit_count = info['credit_count']

            status = "üî¥ CON N·ª¢" if balance < 0 else "üü¢ NG∆Ø·ªúI CHO N·ª¢"
            print(f"   üë§ {person}: {status}")
            print(f"      üí∞ S·ªë d∆∞: ${balance:.2f}")
            print(f"      ‚≠ê ƒêi·ªÉm ∆∞u ti√™n: {priority:.2f}")
            print(f"      üì§ Giao d·ªãch n·ª£: {debt_count}")
            print(f"      üì• Giao d·ªãch cho n·ª£: {credit_count}")

        print(f"\nüíµ T·ªïng n·ª£ h·ªá th·ªëng: ${total_debt:.2f}")
        print(f"üíµ T·ªïng cho n·ª£ h·ªá th·ªëng: ${total_credit:.2f}")
        print("‚úÖ Test t√≥m t·∫Øt n·ª£ th√†nh c√¥ng")

    def test_priority_scoring(self):
        """Test t√≠nh ƒëi·ªÉm ∆∞u ti√™n"""
        print("\n" + "="*60)
        print("TEST: T√≠nh ƒëi·ªÉm ∆∞u ti√™n")
        print("="*60)

        transactions = LinkedList[AdvancedTransaction]()

        # Giao d·ªãch qu√° h·∫°n l√¢u - ƒëi·ªÉm ∆∞u ti√™n cao
        tx1 = AdvancedTransaction(
            debtor="Alice", creditor="Bob", amount=50.0,
            borrow_date=self.base_date, due_date=date(2024, 2, 1),
            interest_rate=0.10, penalty_rate=50.0,
            interest_type=InterestType.COMPOUND_DAILY,
            penalty_type=PenaltyType.FIXED
        )
        transactions.append(tx1)

        # Giao d·ªãch c√≤n h·∫°n - ƒëi·ªÉm ∆∞u ti√™n th·∫•p
        tx2 = AdvancedTransaction(
            debtor="Bob", creditor="Charlie", amount=200.0,
            borrow_date=self.base_date, due_date=date(2024, 7, 1),
            interest_rate=0.02, penalty_rate=0.0,
            interest_type=InterestType.SIMPLE,
            penalty_type=PenaltyType.FIXED
        )
        transactions.append(tx2)

        simplifier = AdvancedGreedySimplifier(
            transactions=transactions,
            current_date=self.current_date
        )

        # Ki·ªÉm tra ƒëi·ªÉm ∆∞u ti√™n
        priorities = {}
        current = simplifier.transaction_details.head
        while current:
            detail = current.data
            key = (detail[0], detail[1])
            priorities[key] = detail[6]
            current = current.next

        self.assertTrue(priorities[("Alice", "Bob")] > priorities[("Bob", "Charlie")])
        print(f"‚≠ê ƒêi·ªÉm ∆∞u ti√™n Alice‚ÜíBob: {priorities[('Alice', 'Bob')]:.2f}")
        print(f"‚≠ê ƒêi·ªÉm ∆∞u ti√™n Bob‚ÜíCharlie: {priorities[('Bob', 'Charlie')]:.2f}")
        print("‚úÖ Test t√≠nh ƒëi·ªÉm ∆∞u ti√™n th√†nh c√¥ng")

    def test_multi_party_transactions(self):
        """Test v·ªõi nhi·ªÅu ng∆∞·ªùi tham gia, ki·ªÉm tra c√¢n b·∫±ng t·ªïng th·ªÉ"""
        print("\n" + "="*60)
        print("TEST: Giao d·ªãch nhi·ªÅu chi·ªÅu")
        print("="*60)

        transactions = LinkedList[AdvancedTransaction]()

        # Alice n·ª£ Bob 100
        transactions.append(AdvancedTransaction(
            debtor="Alice", creditor="Bob", amount=100.0,
            borrow_date=self.base_date, due_date=self.current_date,
            interest_rate=0.0, penalty_rate=0.0,
            interest_type=InterestType.SIMPLE,
            penalty_type=PenaltyType.FIXED
        ))

        # Bob n·ª£ Charlie 100
        transactions.append(AdvancedTransaction(
            debtor="Bob", creditor="Charlie", amount=100.0,
            borrow_date=self.base_date, due_date=self.current_date,
            interest_rate=0.0, penalty_rate=0.0,
            interest_type=InterestType.SIMPLE,
            penalty_type=PenaltyType.FIXED
        ))

        # Charlie n·ª£ Alice 100
        transactions.append(AdvancedTransaction(
            debtor="Charlie", creditor="Alice", amount=100.0,
            borrow_date=self.base_date, due_date=self.current_date,
            interest_rate=0.0, penalty_rate=0.0,
            interest_type=InterestType.SIMPLE,
            penalty_type=PenaltyType.FIXED
        ))

        simplifier = AdvancedGreedySimplifier(transactions, self.current_date)
        simplified = simplifier.simplify()

        print("üìä T·ªïng s·ªë giao d·ªãch sau ƒë∆°n gi·∫£n h√≥a:", len(simplified))
        self.assertTrue(simplified.is_empty() or len(simplified) <= 1)
        print("‚úÖ Test giao d·ªãch nhi·ªÅu chi·ªÅu th√†nh c√¥ng")

    def test_percentage_penalty_handling(self):
        """Test x·ª≠ l√Ω m·ª©c ph·∫°t theo ph·∫ßn trƒÉm"""
        print("\n" + "="*60)
        print("TEST: Ph·∫°t theo ph·∫ßn trƒÉm")
        print("="*60)

        transactions = LinkedList[AdvancedTransaction]()
        tx = AdvancedTransaction(
            debtor="Minh", creditor="T√∫", amount=200.0,
            borrow_date=self.base_date, due_date=date(2024, 2, 1),
            interest_rate=0.05, penalty_rate=10.0,
            interest_type=InterestType.SIMPLE,
            penalty_type=PenaltyType.PERCENTAGE
        )
        transactions.append(tx)

        simplifier = AdvancedGreedySimplifier(transactions, self.current_date)

        breakdown = FinancialCalculator.calculate_total_debt(
            200.0, 0.05, 10.0,
            self.base_date, date(2024, 2, 1), self.current_date,
            InterestType.SIMPLE, PenaltyType.PERCENTAGE
        )

        expected_total = breakdown['total']
        actual_balance = simplifier.people_balances.get("Minh", 0.0)

        print(f"üí∞ T·ªïng n·ª£ th·ª±c t·∫ø: ${-actual_balance:.2f}")
        print(f"üìà T·ªïng n·ª£ d·ª± ki·∫øn: ${expected_total:.2f}")
        self.assertAlmostEqual(-actual_balance, round_money(expected_total), delta=EPSILON)
        print("‚úÖ Test ph·∫°t theo ph·∫ßn trƒÉm th√†nh c√¥ng")

if __name__ == '__main__':
    # Ch·∫°y t·∫•t c·∫£ test cases v·ªõi output verbose
    unittest.main(verbosity=2)
